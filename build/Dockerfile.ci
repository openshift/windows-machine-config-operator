# CI Dockerfile
# CI requires a special Dockerfile for use with OpenShift Builds which is what is used to build the image. This requires
# building the operator from the PR source without using the operator-sdk.
# NOTE: RUN mkdir <dir> is being used in cases where a directory needs to be created as CI image builds does not seem to
# be creating the directory as a result of the WORKDIR directive. 
# build stage for building binaries
FROM golang:1.13.8 as build
LABEL stage=build

ARG OPENSHIFT_BUILD_NAMESPACE
ARG IMAGE_FORMAT
RUN env

# Build WMCB
RUN mkdir /build/
WORKDIR /build/
# Pin this to a release branch once branching has ocurred and master is no longer fast forwarded.
RUN git clone https://github.com/openshift/windows-machine-config-bootstrapper.git
WORKDIR windows-machine-config-bootstrapper
RUN make build

# Build hybrid-overlay
WORKDIR /build/
RUN git clone https://github.com/openshift/ovn-kubernetes/
WORKDIR ovn-kubernetes/go-controller/
RUN make windows

# Build WMCO
# The source here corresponds to the code in the PR and is placed here by the CI infrastructure.
RUN mkdir /build/windows-machine-config-operator
WORKDIR /build/windows-machine-config-operator
COPY . .
RUN make build

# download stage for downloading packages
FROM registry.access.redhat.com/ubi8/ubi-minimal as download
LABEL stage=download
RUN mkdir /download/
WORKDIR /download/
RUN microdnf -y install wget tar gzip
RUN microdnf -y update

# Download, checksum and extract the kubernetes node package
# We are tightly coupling the operator to the OpenShift version, so with every OpenShift release, we will update the
# kubernetes node version.
RUN wget https://dl.k8s.io/v1.17.3/kubernetes-node-windows-amd64.tar.gz
RUN echo "7323b7adf83fccc65eea9f23370794aa9901e9a9b3b1ac90403197448408eee5be84f541aa2448ceaa12fe6278814575a26132cf6e0ddd2f8aa5fa47bd127c71 kubernetes-node-windows-amd64.tar.gz" > kubernetes-node-windows-amd64.tar.gz.sha512
RUN sha512sum -c kubernetes-node-windows-amd64.tar.gz.sha512
RUN tar -zxf kubernetes-node-windows-amd64.tar.gz

# Download, checksum and extract the CNI plugin package
RUN wget https://github.com/containernetworking/plugins/releases/download/v0.8.2/cni-plugins-windows-amd64-v0.8.2.tgz
RUN echo "705a760673fd9e2164ac38f0df7d739ca6c3ec4f4204b0c439227ec6da7cb153859013c917e7f8f1a9456365dd9193f627a7e9e4e1981725cab89bb5ab881ec0 cni-plugins-windows-amd64-v0.8.2.tgz" > cni-plugins-windows-amd64-v0.8.2.tgz.sha512
RUN sha512sum -c cni-plugins-windows-amd64-v0.8.2.tgz.sha512
RUN mkdir /download/cni-plugins/
WORKDIR /download/cni-plugins/
RUN tar -zxf /download/cni-plugins-windows-amd64-v0.8.2.tgz

# Build the operator image with following payload structure
# /payload/
#├── cni-plugins
#│   ├── flannel.exe
#│   ├── host-local.exe
#│   ├── win-bridge.exe
#│   └── win-overlay.exe
#├── hybrid-overlay-node.exe
#├── kube-node
#│   ├── kubelet.exe
#│   └── kube-proxy.exe
#├── powershell
#│   └── wget-ignore-cert.ps1
#└── wmcb.exe

FROM registry.access.redhat.com/ubi8/ubi-minimal:latest
LABEL stage=operator

# Copy wmcb.exe
RUN mkdir /payload/
WORKDIR /payload/
COPY --from=build /build/windows-machine-config-bootstrapper/wmcb.exe .

# Copy hybrid-overlay-node.exe
COPY --from=build /build/ovn-kubernetes/go-controller/_output/go/bin/windows/hybrid-overlay-node.exe .

# Copy kubelet.exe and kube-proxy.exe
RUN mkdir /payload/kube-node/
WORKDIR /payload/kube-node/
COPY --from=download /download/kubernetes/node/bin/kubelet.exe .
COPY --from=download /download/kubernetes/node/bin/kube-proxy.exe .

# Copy CNI plugin binaries
RUN mkdir /payload/cni-plugins/
WORKDIR /payload/cni-plugins/
COPY --from=download /download/cni-plugins/flannel.exe .
COPY --from=download /download/cni-plugins/host-local.exe .
COPY --from=download /download/cni-plugins/win-bridge.exe .
COPY --from=download /download/cni-plugins/win-overlay.exe .

# Copy wget-ignore-cert powershell script
RUN mkdir /payload/powershell/
WORKDIR /payload/powershell/
COPY --from=build /build/windows-machine-config-operator/pkg/internal/wget-ignore-cert.ps1 .

WORKDIR /

ENV OPERATOR=/usr/local/bin/windows-machine-config-operator \
    USER_UID=1001 \
    USER_NAME=windows-machine-config-operator

# Changes needed for our CI

# install make package
RUN microdnf -y install make tar.x86_64 gzip.x86_64 wget.x86_64
RUN microdnf -y update

# Download and install Go. We need
RUN curl -L -s https://dl.google.com/go/go1.13.8.linux-amd64.tar.gz > go1.13.8.linux-amd64.tar.gz \
    && sha256sum go1.13.8.linux-amd64.tar.gz \
    && echo "0567734d558aef19112f2b2873caa0c600f1b4a5827930eb5a7f35235219e9d8  go1.13.8.linux-amd64.tar.gz" | sha256sum -c \
    && tar -xzf go1.13.8.linux-amd64.tar.gz \
    && mv go /usr/local \
    && rm -rf ./go*

# Download and install oc
RUN curl -L -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/4.2.2/openshift-client-linux-4.2.2.tar.gz -o openshift-origin-client-tools.tar.gz \
    && echo "8f853477fa99cfc4087ad2ddf9b13b9d22e5fc4d5dc24c63ec5b0a91bb337fc9 openshift-origin-client-tools.tar.gz" | sha256sum -c \
    && tar -xzf openshift-origin-client-tools.tar.gz \
    && mv oc /usr/bin/oc \
    && mv kubectl /usr/bin/kubectl \
    && rm -rf ./openshift* \
    && oc version

# Copy the source code to be used by our ci infra
RUN mkdir -p /go/src/github.com/openshift/windows-machine-config-operator/
WORKDIR /go/src/github.com/openshift/windows-machine-config-operator/
COPY --from=build /build/windows-machine-config-operator .

# Allow building binaries and creation of /go/.cache directory by the hack script
RUN chmod -R g=u+w /go

ENV PATH="${PATH}:/usr/local/go/bin"
ENV GOPATH="/go"
ENV GOCACHE="/go/.cache"

# install operator binary
COPY --from=build /build/windows-machine-config-operator/build/_output/bin/windows-machine-config-operator ${OPERATOR}
COPY --from=build /build/windows-machine-config-operator/build/bin /usr/local/bin
RUN  /usr/local/bin/user_setup

# Allow uid/gid in OpenShift
RUN chmod g=u /etc/passwd /etc/group
RUN chmod g=u /etc

# Create the directories needed for CI to work
RUN mkdir -m 777 -p /etc/cloud/
RUN mkdir -m 777 -p /etc/private-key/

ENTRYPOINT [ "/bin/bash" ]
USER ${USER_UID}
